// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

generator nestgraphql {
  provider               = "node node_modules/prisma-nestjs-graphql"
  output                 = "../libs/prisma/src/@generated"
  fields_Validator_from  = "class-validator"
  fields_Validator_input = true
  emitSingle             = true
  purgeOutput            = true
}

datasource db {
  provider = "mysql"
  url      = env("DB_URL")
}

model User {
  id            Int             @id @default(autoincrement())
  username      String?         @unique
  email         String          @unique
  password      String?
  /// @HideField()
  createdAt     DateTime        @default(now())
  /// @HideField()
  updatedAt     DateTime        @updatedAt
  /// @HideField()
  SocialAccount SocialAccount[]
  /// @HideField()
  reports       Report[]

  @@map("users")
}

model SocialAccount {
  id         Int      @id @default(autoincrement())
  provider   BigInt
  providerId String
  /// @HideField()
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId     Int
  /// @HideField()
  createdAt  DateTime @default(now())
  /// @HideField()
  updatedAt  DateTime @updatedAt

  @@map("social_accounts")
}

model Country {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  code      String   @unique
  /// @HideField()
  createdAt DateTime @default(now())
  /// @HideField()
  updatedAt DateTime @updatedAt

  /// @HideField()
  region Region[]
  @@map("countries")
}

model Region {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  /// @HideField()
  country   Country  @relation(fields: [countryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  countryId Int
  /// @HideField()
  createdAt DateTime @default(now())
  /// @HideField()
  updatedAt DateTime @updatedAt

  /// @HideField()
  city City[]
  @@map("regions")
}

model City {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  /// @HideField()
  region    Region   @relation(fields: [regionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  regionId  Int
  /// @HideField()
  createdAt DateTime @default(now())
  /// @HideField()
  updatedAt DateTime @updatedAt

  /// @HideField()
  reports Report[]
  @@map("cities")
}

model Tag {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  slug      String   @unique
  /// @HideField()
  createdAt DateTime @default(now())
  /// @HideField()
  updatedAt DateTime @updatedAt

  /// @HideField()
  reports Report[]
  @@map("tags")
}

model Report {
  id        Int      @id @default(autoincrement())
  title     String
  content   String   @db.Text
  /// @HideField()
  createdAt DateTime @default(now())
  /// @HideField()
  updatedAt DateTime @updatedAt

  location Unsupported("Point")?
  /// @HideField()
  user     User?                 @relation(fields: [userId], references: [id], onDelete: SetNull, onUpdate: SetNull)
  userId   Int?
  /// @HideField()
  city     City?                 @relation(fields: [cityId], references: [id], onDelete: SetNull, onUpdate: SetNull)
  cityId   Int?

  /// @HideField()
  tags  Tag[]
  /// @HideField()
  media ReportMedia[]
  @@map("reports")
}

model Media {
  id        Int      @id @default(autoincrement())
  path      String
  name      String
  /// @HideField()
  createdAt DateTime @default(now())
  /// @HideField()
  updatedAt DateTime @updatedAt

  /// @HideField()
  reportMedia ReportMedia[]
  @@map("media")
}

model ReportMedia {
  id        Int      @id @default(autoincrement())
  /// @HideField()
  createdAt DateTime @default(now())
  /// @HideField()
  updatedAt DateTime @updatedAt

  /// @HideField()
  report   Report @relation(fields: [reportId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  reportId Int
  /// @HideField()
  media    Media  @relation(fields: [mediaId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  mediaId  Int

  @@map("report_media")
}
